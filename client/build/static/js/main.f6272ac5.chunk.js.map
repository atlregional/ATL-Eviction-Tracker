{"version":3,"sources":["logos/ARC_logo.png","logos/FedLogo2.PNG","fonts/Noto_Sans_KR/NotoSansKR-Light.otf","Components/CSVExportButton/index.js","Components/EvictionMap/index.js","Components/EvictionChart/index.js","utils/API.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","CSVExportButton","props","csvTitle","csvFilename","concat","moment","format","csvHeaders","data","Object","values","console","log","csvOptions","fieldSeparator","quoteStrings","decimalSeparator","filename","showTitle","showLabels","title","useTextFile","useKeysAsHeaders","headers","csvExporter","ExportToCsv","smallScreen","react_default","a","createElement","Icon","id","name","onClick","generateCsv","Button","color","content","EvictionMap","_useState","useState","_useState2","slicedToArray","legendVisble","setLegendVisible","_useState3","_useState4","tractData","setTractData","_useState5","_useState6","rawTractData","setRawTractData","_useState7","_useState8","stats","setStats","_useState9","_useState10","bins","setBins","_useState11","_useState12","hoverID","setHoverID","_useState13","_useState14","csvData","setCSVData","_useState15","_useState16","monthOptions","setMonthOptions","_useState17","_useState18","selectedMonth","setSelectedMonth","colors","reverse","handleData","dataObject","rawDataObject","normalizeData","toConsumableArray","filter","item","countyFilter","toString","padStart","map","parseFloat","binningType","binsArray","valueArray","sort","b","max","Math","apply","min","range","j","push","top","floor","length","bottom","bin","i","calcStats","countyFIPS","countyBounds","999","center","zoom","067","063","121","135","089","useEffect","geojson","dataArray","features","feature","properties","slice","counties","includes","TractID","Month","Total Eviction Filings","Eviction Filing Rate","handleCSVData","monthArray","monthOptionsArray","month","text","value","key","getMonthList","Fragment","Map","maxZoom","zoomSnap","zoomDelta","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","boundaryGeoJSON","GeoJSON","onAdd","e","target","bringToBack","onMouseover","layer","GEOID","onMouseout","onMouseDown","style","geoid","forEach","weight","fillColor","fillOpacity","featureStyler","Tooltip","className","numeral","zIndex","position","width","textAlign","react_loader_spinner_default","type","TileLayer","attribution","url","inverted","onChange","Dropdown","float","inline","placeholder","options","backgroundColor","size","Components_CSVExportButton","countyInfo","find","dateRange","end","EvictionChart","caseData","setCaseData","timeScale","setTimeScale","Date","getTime","sortByDate","startOf","objectSpread","data2019","subtract","add","entries","_ref","_ref2","File.Date","Total Filings 2020","current","Total Filings 2019","historic","timeLabel","_ref3","defineProperty","county","es6","height","margin","right","left","strokeDasharray","dataKey","angle","textAnchor","tickFormatter","tick","_ref4","active","payload","label","dateInfo","endOf","fill","strokeWidth","Group","charAt","toUpperCase","API","axios","get","App","team","require","sources","countyBoundary","vh","window","innerHeight","document","documentElement","setProperty","innerWidth","geoJSON","setGeoJSON","setBoundaryGeoJSON","vizView","setVizView","setCountyFilter","modalStatus","setModalStatus","setDateRange","AboutContent","member","role","info","department","institution","sourceProps","source","href","rel","note","countyOptions","handleDateRange","dateArray","Set","sortedDates","startDate","endDate","start","then","res","catch","err","error","fluid","selection","Components_EvictionMap","Components_EvictionChart","src","Fedlogo","alt","ARClogo","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.f6272ac5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ARC_logo.63d3376f.png\";","module.exports = __webpack_public_path__ + \"static/media/FedLogo2.2353e79e.PNG\";","module.exports = __webpack_public_path__ + \"static/media/NotoSansKR-Light.1b0504a3.otf\";","import React, { useState } from 'react';\n// import API from '../../utils/API';\nimport { ExportToCsv } from 'export-to-csv';\n// import { Button } from 'semantic-ui-react';\nimport { Button, Icon } from 'semantic-ui-react';\n\nimport moment from 'moment';\nimport './style.css';\n\n\nconst CSVExportButton = props => {\n\n  const csvTitle = props.csvTitle ? props.csvTitle : null;\n  const csvFilename = props.csvFilename ? props.csvFilename : `download-${moment().format()}`;\n  const csvHeaders = props.csvHeaders ? props.csvHeaders : null;\n    \n  const data = props.data ? \n    Object.values(props.data)\n    : null;\n\n    console.log(props.data);\n        \n  \n\n  const csvOptions = \n            { \n              fieldSeparator: ',',\n              quoteStrings: '\"',\n              decimalSeparator: '.',\n              filename: csvFilename, \n              showTitle: true,\n              showLabels: true,\n              title: csvTitle,\n              useTextFile: false,\n              useKeysAsHeaders: csvHeaders ? false : true,\n              headers: csvHeaders\n            };\n\n  const csvExporter = new ExportToCsv(csvOptions);\n\n        \n  return (\n    props.data ?\n      !props.smallScreen ?\n      <Button\n        id='csv-button'\n        // inverted\n        // name='download'\n        // size={props.size ? props.size : 'small'}\n        // basic={ props.basic ? props.basic : \"false\" }\n        color={ 'black'}\n        // style={{\n        //   // padding: '5px',  \n        //   margin: props.margin ? props.margin : '10px',\n        // //   float: props.float ? props.float : 'left',\n        //   borderRadius: props.borderRadius ? props.borderRadius : '5px 5px 0 0',\n        //   height: props.height ? props.height : '40px'}}\n        onClick={data ? () =>\n         \n          csvExporter.generateCsv(data) \n          : console.log('No Data for CSV Button')}\n      >\n        {props.content}\n      </Button> : \n            < Icon\n            id='csv-button'\n            name='download'\n            // size={'big'}\n            onClick={data ? () =>\n             \n              csvExporter.generateCsv(data) \n              : console.log('No Data for CSV Button')}\n          />\n      : null \n  )\n\n};\n\nexport default CSVExportButton;","import React, { useState, useEffect } from 'react';\nimport { Map as LeafletMap, TileLayer, GeoJSON, Tooltip } from 'react-leaflet';\nimport numeral from 'numeral';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport CSVExportButton from '../CSVExportButton';\nimport moment from 'moment';\nimport Loader from 'react-loader-spinner';\nimport './style.css';\n\nconst EvictionMap = props => {\n\n    const [legendVisble, setLegendVisible] = useState(true);\n    const [tractData, setTractData] = useState();\n    const [rawTractData, setRawTractData] = useState();\n    const [stats, setStats] = useState();\n    const [bins, setBins] = useState();\n    const [hoverID, setHoverID] = useState();\n    const [csvData, setCSVData] = useState();\n    const [ monthOptions, setMonthOptions ] = useState();\n    const [ selectedMonth, setSelectedMonth ] = useState('January')\n\n    const colors = [\"#DC1C13\", \"#EA4C46\", \"#F07470\", \"#F1959B\",  \"#F6BDC0\"].reverse();\n\n    const getMonthList = () => {\n        const monthArray = [];\n        props.data.map(item => \n            !monthArray.includes(moment(item['File.Date']).format('MMMM')) ? \n                monthArray.push(moment(item['File.Date']).format('MMMM'))\n            : null\n        );\n        const monthOptionsArray = monthArray.map(month =>\n            ({\n                text: `${month} ${2020}`,\n                value: month,\n                key: month\n            })\n        );\n        setMonthOptions(monthOptionsArray);\n    }\n    \n    // Create function to setStats({max: value, min: value, range: value})\n    const calcStats = data => {\n        const valueArray = Object.values(data).filter(a => a > 0).sort((a,b) => a > b ? -1 : 1);\n        // console.log(valueArray);\n        const max = Math.max(...valueArray);\n        const min = Math.min(...valueArray);\n        const bins = [];\n\n        setStats({\n            max: max,\n            min: min,\n            range: max - min\n        });\n\n        const createBins = (binningType, binsArray) => \n            binningType === 'quantile' ?\n                colors.map((color,j) =>\n                bins.push({\n                    top: valueArray[Math.floor(j * valueArray.length/colors.length)],\n                    bottom: valueArray[Math.floor((j + 1) * valueArray.length/colors.length) - 1]\n                })\n            )\n            : binningType === 'defined' ?\n                binsArray.map((bin,i) => \n                    bins.push({\n                        bottom: i !== 0 ? binsArray[i - 1] : 0,\n                        top: bin\n                    })\n                ) \n            : null\n\n        createBins('defined', [1, 2, 5, 10, 18]);\n        // createBins('quantile')\n        setBins(bins);\n        // console.log(bins);\n    }\n\n    const handleData = () => {\n        const dataObject = {};\n        const rawDataObject = {};\n        const normalizeData = {};\n\n        \n\n        [...props.data]\n            .filter(item =>\n                props.countyFilter !== 999 && props.countyFilter !== '999' ? \n                props.countyFilter.toString().padStart(3,'0') === item['COUNTYFP10'].toString().padStart(3,'0')\n                : true\n            )\n            .filter(item => \n                moment(item['File.Date']).format('MMMM') === selectedMonth\n            )\n            .map(item =>\n                rawDataObject[item['tractID']] = rawDataObject[item['tractID']] ?\n                    (rawDataObject[item['tractID']] + parseFloat(item['Total Filings']))\n                    : parseFloat(item['Total Filings'])\n            );\n\n        props.normalizeData.map(item => rawDataObject[item['GEOID']] > 0 && item['RentHHs'] ?\n            dataObject[item['GEOID']] = rawDataObject[item['GEOID']] * 100 / item['RentHHs']\n            : null\n        );\n\n        props.normalizeData.map(item => normalizeData[item['GEOID']] = item['RentHHs'])\n\n\n        calcStats(dataObject);\n        setTractData(dataObject);\n        setRawTractData(rawDataObject);\n    };\n\n    const handleCSVData = () => {\n        console.log(props.geojson);\n        const dataArray = \n            tractData && props.geojson ?\n                props.geojson.features\n                .filter(feature =>\n                    props.countyFilter !== 999 && props.countyFilter !== '999' ? \n                        feature.properties['GEOID'].slice(2,5) === props.countyFilter.toString().padStart(3, '0') :\n                    props.counties.includes(feature.properties['GEOID'].slice(2,5))                )\n                .filter(feature => \n                    rawTractData[feature.properties['GEOID']] &&\n                    tractData[feature.properties['GEOID']]\n                )\n                .map(feature =>\n                    ({\n                        \"TractID\" : feature.properties['GEOID'],\n                        \"Month\" : `${selectedMonth} 2020`,\n                        \"Total Eviction Filings\" : rawTractData[feature.properties['GEOID']],\n                        \"Eviction Filing Rate\" : tractData[feature.properties['GEOID']]\n                    })\n                ) : null;\n        console.log(dataArray);\n        \n        setCSVData(dataArray);\n            // .map(item =>\n                \n            \n            // )\n    }\n\n\n    const countyFIPS = ['13067', '13063', '13089', '13121', '13135']\n    const countyBounds = {\n        '999': {\n            center: [33.77285,-84.33268],\n            zoom: 9.8\n        },\n        '067': {\n            center: [33.9132,-84.58030],\n            zoom: props.smallScreen ? 10.2 : 11\n        },\n        '063': {\n            center: [33.50533,-84.34112],\n            zoom: props.smallScreen ? 10.5 : 11.2\n        },\n        '121': {\n            center: [33.840747,-84.46563],\n            zoom: props.smallScreen ? 9.4 : 10\n        },\n        '135': {\n            center: [33.959468,-84.02901],\n            zoom: props.smallScreen ? 10 : 10.8\n        },\n        '089': {\n            center: [33.79857,-84.20737],\n            zoom: props.smallScreen ? 10.4 : 11\n        }\n    }\n\n    const CustomTooltip = () => (\n        <div className='tooltip-content'>\n        <div>\n            In <span className='tooltip-data'>{selectedMonth} 2020</span>\n            {/* between <span className='tooltip-data'>{dateRange.start}</span> and <span className='tooltip-data'>{dateRange.end}</span> */}\n        </div>\n        <div>\n            in census tract <span className='tooltip-data'>{hoverID}</span>\n        </div> \n\n        <div>\n            there were <span className='tooltip-data'>{numeral(rawTractData[hoverID]).format('0,0')}</span> total reported eviction filings\n        </div>\n        <div>\n            resulting in an eviction filing rate of <span className='tooltip-data'>{numeral(tractData[hoverID]).format('0.0')}%</span>.\n        </div>\n    </div>\n    );\n\n    // const Legend = () => (\n       \n    // );\n\n    const featureStyler = feature => {\n                        \n        const geoid = feature.properties['GEOID'];\n        const value = tractData[geoid];\n        let color = null;\n        bins.forEach((bin, i) =>\n            value < bin.top && \n            value >= bin.bottom ? \n                color = colors[i]\n            : null\n        );\n\n        return ({\n            color: color ? color : null,\n            weight: value ? 1 : 0,\n            fillColor: color ? color : 'lightgrey',\n            fillOpacity: color ? .7 : .2\n        })    \n    };\n\n    useEffect(() => { handleData() }, [props.countyFilter, selectedMonth]);\n    useEffect(() => handleCSVData(), [tractData, props.geojson]);\n    // useEffect(() => { handleDateRange() }, []);\n\n    // console.log(props.boundaryGeoJSON);\n    useEffect(() => getMonthList(), []);\n    // console.log(monthOptions);\n    // console.log(bins);\n\n    return (\n        <>\n        <LeafletMap\n            key={'leaflet-map-' + props.name}\n            center={countyBounds[props.countyFilter.toString().padStart(3, '0')].center}\n            zoom={countyBounds[props.countyFilter.toString().padStart(3, '0')].zoom}\n            maxZoom={18}\n            zoomSnap={0.2}\n            zoomDelta={0.2}\n            attributionControl={true}\n            zoomControl={true}\n            doubleClickZoom={true}\n            scrollWheelZoom={true}\n            dragging={true}\n            animate={true}\n            // bounds={null}\n            // onViewportChange={e => console.log(e)}\n        >\n            {  props.boundaryGeoJSON ?\n                <GeoJSON\n                key={'county-boundary' + props.countyFilter }\n                data={props.boundaryGeoJSON}\n                filter={feature => props.countyFilter !== 999 && props.countyFilter !== '999' ?\n                        feature.properties['GEOID'] === `13${props.countyFilter.toString().padStart(3, '0')}`\n                        : countyFIPS.includes(feature.properties['GEOID']) }\n                />\n                : null\n            }\n            {  props.geojson && \n               tractData && \n               stats ?\n                <GeoJSON\n                    key={'map-layer-' + props.name + props.countyFilter + selectedMonth}\n                    data={props.geojson}\n                    onAdd={e => e.target.bringToBack()}\n                    onMouseover={e => e.layer.feature ? setHoverID(e.layer.feature.properties.GEOID) : null}\n                    onMouseout={() => setHoverID()}\n                    onMouseDown={e => e.layer.feature ? setHoverID(e.layer.feature.properties.GEOID) : null}\n                    filter={feature => props.countyFilter !== 999 && props.countyFilter !== '999' ? \n                        feature.properties['GEOID'].slice(2,5) === props.countyFilter.toString().padStart(3, '0') :\n                        props.counties.includes(feature.properties['GEOID'].slice(2,5))}\n                    style={feature => featureStyler(feature)}> \n                    <Tooltip>\n                        <CustomTooltip />\n                    </Tooltip>\n\n                </GeoJSON>\n                : <div style={{zIndex: '99999', color: '#609580', position: 'absolute', bottom: '35vh', width: '100%', textAlign: 'center'}}>\n                    {/* <h2>Layers Loading...</h2> */}\n                        <Loader id='loader-box' color='#DC1C13' type='Circles' />\n                    </div>\n            }\n            <TileLayer\n                key={'tile-layer'}\n                attribution={'&copy <a href=\"http://osm.org/copyright\">OpenStreetMap contributors</a>'}\n                url={'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png'}\n\n\n            />  \n            \n            \n        </LeafletMap>\n\n        { legendVisble && props.smallScreen ?\n            <div \n                id='legend-close-icon'\n                onClick={() => setLegendVisible(false)}\n            >\n                <Icon\n                    // size='small'\n                    inverted \n                    name='close'\n                />\n            </div> : null\n\n        }\n        { legendVisble ?\n            <div className='legend'>\n                <div id='legend-header'>\n                    <h3>Eviction Filing Rate*</h3>\n                </div>\n                <div id='month-selector'>\n\n                    { props.smallScreen ?\n\n                        <select value={selectedMonth} \n                            onChange={e => setSelectedMonth(e.target.value)}\n                        >\n                            {monthOptions ? monthOptions.map(month => \n                                <option \n                                key={month.text} value={month.value} id={`option-${month.text}`}>\n                                    {month.text}</option>    \n                            ) : null}\n                        </select> :\n\n                        <Dropdown\n                            style={{float: 'center'}} \n                            // selection\n                            inline\n                            // fluid\n                            placeholder=\"Select Month\"\n                            value={selectedMonth}\n                            options={monthOptions}\n                            onChange={(e, data) => setSelectedMonth(data.value)}\n                        />\n                    }\n                </div>\n                <div id='symbol-container'>\n                    <div id='symbol-column'>\n                        {\n                            [...colors]\n                                .reverse()    \n                                .map(color =>\n                                    <div className='legend-symbol' style={{backgroundColor: color}}/>\n                                )\n                        }                        \n                    </div>\n                    <div id='symbol-labels'>\n                        {\n                            bins ?\n                                [...bins]\n                                .reverse()\n                                .map(bin =>\n                                    <div className='legend-label'>\n                                        {`${numeral(bin.bottom).format('0,0')}% to < ${numeral(bin.top).format('0,0')}%`}\n                                    </div>\n                                )\n                            : null\n                        }\n\n                    </div>\n                </div>\n                <div id='legend-footer'>\n                    *<em>calculated by dividing total filings by the number of renter housholds</em>\n                </div>\n\n            </div> : null \n        }\n        {   !legendVisble && props.smallScreen ?\n            <div id='legend-icon'>\n                <Icon \n                    name='list alternate outline' \n                    size='huge'\n                    onClick={() => setLegendVisible(true)}\n                />\n            </div> : null\n        }\n        {\n            csvData ?\n                <div id='map-data-export-button'>\n                    <CSVExportButton \n                        smallScreen={props.smallScreen}\n                        csvTitle={\n                            `Title: ${selectedMonth} Eviction Filings by Census Tracts in ${props.countyInfo.find(item => item.key === props.countyFilter.toString().padStart(3, '0')).text} as of ${props.dateRange ? moment(props.dateRange.end).format('M/D/YYYY') : null}`\n                            + '\\nSource: Atlanta Region Eviction Tracker - https://metroatlhousing.org/atlanta-region-eviction-tracker'\n                          }\n                        csvFilename={`Eviction-Filings-by-Census-Tract-${selectedMonth}-2020-${props.countyInfo.find(item => item.key === props.countyFilter.toString().padStart(3, '0')).text}`}\n                        data={csvData}\n                        // data={props.data.filter(item => \n\n                        // )}\n                        content={'Download Data'}\n                    />\n                </div>\n            : null\n        }   \n     </>\n    )\n}\n\n\nexport default EvictionMap;","import React, { useState, useEffect } from 'react';\nimport {\n  // BarChart,\n  Bar,\n  ComposedChart,\n  Line,\n  // Brush,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { Button } from 'semantic-ui-react';\nimport CSVExportButton from '../CSVExportButton';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport Loader from 'react-loader-spinner';\n\n// STYLESHEET\nimport './style.css';\n// CSV TEST-DATA IMPORT\n\n\nconst EvictionChart = props => {\n\n  const sortByDate = (a, b) => {\n    var dateA = new Date(a['File.Date']).getTime();\n    var dateB = new Date(b['File.Date']).getTime();\n    return dateA > dateB ? 1 : -1;\n  };  \n\n\n    // console.log(props.data);\n\n// function to sort by date;\n\n  // case data for csv test cases;\n  const [caseData, setCaseData] = useState();\n  const [csvData, setCSVData] = useState();\n  // const [countyFilter, setCountyFilter] = useState(63);\n  const [timeScale, setTimeScale] = useState('weekly');\n  // const [selectedCounties, setSelectedCounties] = useState([63]);\n  // console.log('countyFilter: ', countyFilter);\n  const handleData = () => {\n    // csv(csvData)\n    //   .then((data) => {\n        // console.log('data: ', data);\n        const dataObject = {};\n\n        // let getDateArray = (start, end) => {\n\n        //   let arr = [],\n        //     dt = new Date(start),\n        //     ed = new Date(end);\n\n        //   // console.log(dt);\n\n        //   while (dt <= ed) {\n        //     arr.push(new Date(dt));\n        //     dt.setDate(dt.getDate() + 1);\n        //   }\n\n        //   // console.log(arr)\n\n        //   return arr;\n\n        // }\n\n        // getDateArray(\"2020-01-01\", \"2020-08-21\").map(date => \n        //     timeScale === 'daily' ? \n        //       dataObject[moment(date).format('M/D/YY')] = 0\n        //     : null\n        //   );\n        \n        props.data\n          .sort((a, b) => sortByDate(a, b))\n          .filter(item =>\n            props.countyFilter !== 999 && \n            props.countyFilter !== '999' ? \n              props.countyFilter === item['COUNTYFP10'] || \n              props.countyFilter.toString().padStart(3, '0') === item['COUNTYFP10'].toString().padStart(3, '0') \n            : true\n          )\n          .map(item => {\n            const key = timeScale === 'daily' ? \n                moment(item['File.Date']).format('M/D') \n              : timeScale === 'weekly' ?\n                moment(item['File.Date']).startOf('week')\n              : timeScale === 'monthly' ?\n                moment(item['File.Date']).startOf('month') \n            : null;\n\n            dataObject[key] = {...dataObject[key]}\n\n            dataObject[key]['current'] = dataObject[key]['current'] ?\n              dataObject[key]['current'] + parseFloat(item['Total Filings'])\n              : parseFloat(item['Total Filings']);\n          });\n\n          // console.log(props.dateRange)\n\n          props.data2019\n            .filter(item =>\n              props.countyFilter !== 999 && \n              props.countyFilter !== '999' ? \n                props.countyFilter === item['COUNTYFP10'] || \n                props.countyFilter.toString().padStart(3, '0') === item['COUNTYFP10'].toString().padStart(3, '0') \n              : true\n            )\n            .filter(item => new Date(item['File.Date']).getTime() < new Date(moment(props.dateRange.end).subtract(1, 'y').format('M/D/YYYY')).getTime())\n            .map(item => {\n              const key = item['File.Date'] ? timeScale === 'daily' ? \n                  moment(item['File.Date']).format('M/D')\n                : timeScale === 'weekly' ?\n                  moment(item['File.Date']).add(1, 'y').startOf('week')\n                : timeScale === 'monthly' ?\n                  moment(item['File.Date']).add(1, 'y').startOf('month') \n              : null : null\n\n              // console.log(item['File.Date']);\n\n              dataObject[key] = {...dataObject[key]}\n\n              dataObject[key]['historic'] = dataObject[key]['historic'] ?\n              dataObject[key]['historic'] + parseFloat(item['Total Filings'])\n              : parseFloat(item['Total Filings']);\n\n              \n\n            })\n\n        console.log(dataObject);\n\n\n        const dataArray = Object.entries(dataObject).map(([key, value]) =>\n          ({\n            \"File.Date\": key,\n            \"Total Filings 2020\": value.current,\n            \"Total Filings 2019\" : value.historic\n          })\n        );\n        setCaseData(dataArray);\n  };\n\n  const timeLabel = \n    timeScale === 'weekly' ? \n    \"Week of\" \n    : timeScale === 'monthly' ?\n      \"Month\"\n      : \"Filing Date\"\n\n  const handleCSVData = () => \n\n    caseData ?\n      caseData.map(item => \n        ({\n          [timeLabel]: moment(item['File.Date']).format(timeScale === 'monthly' ? 'MMMM YYYY' : 'M/D/YYYY'),\n          \"Total Filings 2020\": item[\"Total Filings 2020\"],\n          \"Total Filings 2019\" : item[\"Total Filings 2019\"]\n        })\n      ) : null;\n\n\n  useEffect(() => handleData(), [props.countyFilter, timeScale]);\n  useEffect(() => setCSVData(handleCSVData()), [caseData]);\n\n  const county = props.counties.find(county => county.value.toString().padStart(3, '0') === props.countyFilter.toString().padStart(3,'0'));\n\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    // console.log(payload);\n    const dateInfo = timeScale === 'weekly' ? \n      <div>\n        between <span className='tooltip-data'>{moment(label).format('M/D/YY')}</span> and <span className='tooltip-data'>{moment(label).endOf('week').format('M/D/YY')}</span> \n      </div> : timeScale === 'monthly' ?\n        <div>\n          in <span className='tooltip-data'>{moment(label).format('MMMM YYYY')}</span>  \n        </div> : timeScale === 'daily' ?\n          <div>\n            on <span className='tooltip-data'>{moment(label).format('dddd, MMMM Do YYYY')}</span>  \n          </div> : null;\n    return active ?\n        <div className='tooltip-content chart-tooltip-content'>\n          <div>\n            In {props.countyFilter === 999 || props.countyFilter === '999' ? 'the ' : ''} <span className='tooltip-data'>{county.text}</span>\n          </div>\n          {dateInfo}\n          <div>\n            there were <span className='tooltip-data'>{payload[0] && payload[1] ? numeral(payload[0].value).format('0,0') : '?'}</span> reported eviction filings\n          </div>\n          <div>\n            compared to <span className='tooltip-data'>{payload[0] && payload[1] ? numeral(payload[1].value).format('0,0') : numeral(payload[0].value).format('0,0')}</span> for the same duration in 2019.\n          </div>\n\n        </div>\n    : null;\n  }\n\n  return (\n    <>\n      {/* <Dropdown\n        className=\"icon chart-dropdown\"\n        placeholder=\"County Options\"\n        fluid\n        // multiple\n        selection\n        value={countyFilter}\n        options={countyOptions}\n        onChange={(e, data) => setCountyFilter(data.value)}\n      /> */}\n      {caseData ?\n\n      <ResponsiveContainer\n        className=\"chart-responsive-container\"\n        width=\"95%\"\n        height=\"85%\"\n      >\n        <ComposedChart\n          className=\"barChart\"\n          data={caseData}\n          margin={{\n            top: 30,\n            right: 20,\n            left: 10,\n            bottom: 20,\n          }}\n        > \n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis \n            dataKey={\"File.Date\"}\n            angle={ timeScale === 'weekly' || timeScale === 'daily' ? -45 : null} \n            textAnchor={timeScale === 'weekly' || timeScale === 'daily'  ? 'end' : 'middle'}\n            // type={'number'}\n            tickFormatter={tick => timeScale === 'monthly' ? moment(tick).format('MMMM') : moment(tick).format('M/D')}\n          />\n          {/* <XAxis dataKey=\"Month\" /> */}\n          <YAxis\n            tickFormatter={tick => numeral(tick).format('0,0')}\n          />\n          {/* <Brush /> */}\n          <Tooltip \n            content={ <CustomTooltip />}\n          />\n          <Bar dataKey=\"Total Filings 2020\" fill=\"#DC1C13\" />\n          <Line \n            dataKey=\"Total Filings 2019\"\n            strokeWidth={2} \n            // fill=\"#DC1C13\"\n            // dot={false}\n            // strokeDasharray={'5 5'}\n            // legendType='circle' \n          />\n          {/* <Bar dataKey=\"tractID\" stackId=\"a\" fill=\"#82ca9d\" /> */}  \n              <Legend />\n\n\n        </ComposedChart>\n        \n\n      </ResponsiveContainer>\n       : <div style={{zIndex: '99999', color: '#609580', position: 'absolute', bottom: '50vh', width: '100%', textAlign: 'center'}}>\n           <Loader id='loader-box' color='#DC1C13' type='Circles' />\n       </div>\n      }\n\n      <div className=\"button-group-container\">\n        <Button.Group className=\"button-group\">\n          {/* <Button \n            active={timeScale === 'daily' ? true : false}\n            onClick={() => setTimeScale('daily')}\n          >Daily</Button> */}\n          <Button \n            active={timeScale === 'weekly' ? true : false}\n            onClick={() => setTimeScale('weekly')}\n\n          >Weekly</Button>\n          <Button \n            active={timeScale === 'monthly' ? true : false}\n            onClick={() => setTimeScale('monthly')}\n\n          >Monthly</Button>\n        </Button.Group>\n      </div>\n      {\n            csvData ?\n                <div id={props.smallScreen ? 'chart-data-export-button-mobile' : 'chart-data-export-button'}>\n                    <CSVExportButton\n                        smallScreen={props.smallScreen} \n                        csvTitle={\n                          `Title: ${timeScale.charAt(0).toUpperCase()}${timeScale.slice(1)} Eviction Filings for ${county.text} as of ${props.dateRange ? moment(props.dateRange.end).format('M/D/YYYY') : null}`\n                          + '\\nSource: Atlanta Region Eviction Tracker - https://metroatlhousing.org/atlanta-region-eviction-tracker'\n                        }\n                        csvFilename={`${timeScale.charAt(0).toUpperCase()}${timeScale.slice(1)}-Eviction-Filings-${county.text.toUpperCase()}`}\n                        data={csvData}\n                        content={'Download Data'}\n                    />\n                </div>\n            : null\n        } \n\n    </>\n  );\n};\n\nexport default EvictionChart;\n","import axios from 'axios';\n\nexport default {\n  getData: url => {\n      return axios.get(url);\n  }\n};","import React, { useState, useEffect } from 'react';\n// import { Radio } from 'semantic-ui-react';\nimport EvictionMap from './Components/EvictionMap';\nimport EvictionChart from './Components/EvictionChart';\nimport { Dropdown, Button, Icon } from 'semantic-ui-react';\nimport moment from 'moment';\nimport API from './utils/API.js';\nimport ARClogo from './logos/ARC_logo.png';\nimport Fedlogo from './logos/FedLogo2.PNG';\n// import CSPAVlogo from './logos/CSPAV_logo.jpg';\nimport './App.css';\n// import { get } from 'mongoose';\n\nconst App = () => {\n\n    const team = require('./Data/team.json');\n    const sources = require('./Data/sources.json');\n    const data = require('./Data/EvictionFilingsByTract.json');\n    const data2019 = require('./Data/EvictionFilingsByCounty2019.json');\n    const normalizeData = require('./Data/RentHHsByTract.json');\n    const countyBoundary = require('./Data/countyboundaries.json');\n\n    const vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n    const smallScreen = window.innerWidth < 850\n\n\n    const [ geoJSON, setGeoJSON ] = useState();\n    const [ boundaryGeoJSON, setBoundaryGeoJSON ] = useState();\n    const [ vizView, setVizView ] = useState('map');\n    const [countyFilter, setCountyFilter] = useState(999);\n    const [modalStatus, setModalStatus] = useState(true);\n    const [dateRange, setDateRange] = useState();\n      \n    const getTractGeoJSON = () => {\n\n        const url = `https://services1.arcgis.com/Ug5xGQbHsD8zuZzM/arcgis/rest/services/ACS2018AllGeo/FeatureServer/0/query?where=SumLevel='Tract' AND PlanningRegion='Atlanta Regional Commission'&SR=4326&outFields=GEOID&f=geojson`\n        \n        // `https://opendata.arcgis.com/datasets/2e73cc4a02a441ba968e6a63a8b526f5_56.geojson`;\n\n\n        API.getData(url)\n            .then(res => setGeoJSON(res.data))\n            .catch(err => console.error(err))\n    };\n\n    const getEvictionData = () => \n        API.getData('./data')\n            .then(res => console.log(res.data))\n            .catch(err => console.error(err))\n\n\n    const AboutContent = {\n        Mission: () => (\n            <div className='about-content-section'>\n                <h2 className='about-content-section-heading'>Mission</h2>\n                <p>\n                    The purpose of this project is to leverage the complementary technological skill, expertise, and organizational resources of the partnering organizations to create a database of eviction filings with the purpose of informing and improving the ability of Metro Atlanta policymakers, Non-government Organizations, service providers, tenant organizers, and government entities to understand and respond to eviction-related housing instability, particularly in the context of the COVID-19 pandemic. In addtion, the intent of this project is to provide access to eviction filings data for research, practice, and policy purposes beyond the immediate threat of COVID-19. This partnership behind this project will collectively work to create the technology necessary to assemble the database of filings and make the filing information available to stakeholders in an understandable, accessible, secure, and responsible manner.\n                </p>\n            </div>\n        ),\n        Team: () => (\n            <div className='about-content-section'>\n                <h2 className='about-content-section-heading'>Team</h2>\n                <div id='about-team'>\n                    <div className='team-member-grid-row'>\n                        {\n                            team.map(member =>\n                                member.name ?\n                                    <div className='about-team-member'>\n                                        <div className='about-team-member-role'>\n                                            {member.role}\n                                        </div> \n                                        <div className='about-team-member-name'>\n                                            {member.name}\n                                        </div>\n                                    {\n                                        member.info.map(info =>\n                                            <div className='about-team-member-info'>\n                                                {info.title ? \n                                                    <div className='about-team-member-title'>\n                                                        {info.title}\n                                                    </div> : null}\n                                                {info.department ? \n                                                    <div className='about-team-member-department'>  \n                                                        {info.department}\n                                                    </div> : null}\n                                                {info.institution ? \n                                                    <div className='about-team-member-institution'> \n                                                        {info.institution}\n                                                    </div> : null}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                : null\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n        ),\n        Data: () => (\n            <div className='about-content-section'>\n                <h2 className='about-content-section-heading'>About The Data</h2>\n                <p>\n                    This data captures formal evictions activity in the metro Atlanta area as it is reflected in county court websites. This data does NOT reflect the number of rental households that undergo forced moves. Research has found that forced moves due to illegal evictions and informal evictions are far larger than the number of tenants displaced through the legal, formal eviction process. While eviction or dispossessory filings are evidence of housing instability, and constitute a negative event for tenants in and of themselves, they are not equivalent to displacement of a tenant. It is difficult to know whether a tenant leaves during a formal eviction process or at what stage of the process this occurs. Eviction filings initiate the process of eviction and are distinct from a \"writ of possession\" which grants a landlord the legal right to remove a tenant.\n                </p>\n                <p>\n                    This data is parsed once a week from magistrate’s courts in Clayton, Cobb, DeKalb, Fulton and Gwinnett counties. Once the evictions case data is captured, each case is geocoded based on the defendant's address and the case events are analyzed to identify associated actions. Due to misssing, incorrect, or difficult to parse addresses, approximately 1% of all filings are excluded from mapped totals.  Analysis of case actions is done with an algorithm that is under development. For this reason, estimates of these actions are currently not included in the aggregated data presented in this tool.  These estimates will, however, likely be included in future versions once the algorithm is complete and sufficiently validated.\n                </p>\n\n            </div>        \n        ),\n        Sources: sourceProps => (\n            <div className='about-content-section'>\n            <h2 className='about-content-section-heading'>{sourceProps.type} Sources</h2>\n            <ul id='about-content-source-list'>\n            {\n                sources ?\n                    sources\n                        .filter(source => source.type === sourceProps.type)\n                        .map((source, i) =>\n                        <li className={'about-content-section-source'}>\n                            {source.name} \n                            { \n                                source.url ? \n                                    <a \n                                        key={`source-link-${i}`}    \n                                        href={source.url}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\" \n                                    >\n                                        <Icon key={`source-link-icon-${i}`} name='external alternate'/>\n                                    </a>\n                               : null\n                            }\n                            {\n                                source.note ?\n                                    <ul className='about-content-source-note'>\n                                        <li>\n                                            <em>{source.note}</em>\n                                        </li>\n                                    </ul>\n\n                                : null\n                            }\n                        </li>\n                    )\n                : null\n            }\n            </ul>\n\n        </div>\n        )\n    }\n\n    const countyOptions = [\n        { key: '999', text: '5-County Region', value: 999 },\n        { key: '063', text: 'Clayton County', value: 63 },\n        { key: '067', text: 'Cobb County', value: 67 },\n        { key: '089', text: 'Dekalb County', value: 89 },\n        { key: '121', text: 'Fulton County', value: 121 },\n        { key: '135', text: 'Gwinnett County', value: 135 },\n    \n      ];\n\n    \n\n    const handleDateRange = () => {\n\n        const sortByDate = (a, b) => {\n            var dateA = new Date(a).getTime();\n            var dateB = new Date(b).getTime();\n            return dateA > dateB ? 1 : -1;\n         };\n        const dateArray = new Set([...data.map(item => item['File.Date'])]);\n        const sortedDates = [...dateArray].sort((a,b) => sortByDate(a,b))\n        // console.log(dateArray);\n        // console.log(sortedDates);\n        const startDate = sortedDates[0];\n        const endDate = sortedDates[sortedDates.length -1];\n        setDateRange({start: startDate, end: endDate});\n    }\n    \n    useEffect(() => getTractGeoJSON(), []);\n    useEffect(() => setBoundaryGeoJSON(countyBoundary), []);\n    useEffect(() => handleDateRange(), []); \n    useEffect(() => getEvictionData(), []); \n\n    return (\n        <div id='eviction-tracker'>\n            {\n                modalStatus ? \n                    <div id='modal'>\n                        <div id='modal-content'>\n                            <div id='modal-heading'>\n                                <div id='welcome'>Welcome to the</div>\n                                <h1>\n                                    ATLANTA REGION\n                                </h1>\n                                <h1>\n                                    EVICTION TRACKER\n                                </h1>                                \n                            </div>\n\n                            <div id='modal-body'>\n                                <AboutContent.Mission />\n                                <AboutContent.Data />\n                                <AboutContent.Team />\n                                <AboutContent.Sources type={'Court Record Data'} />\n                                <AboutContent.Sources type={'Other Data'} />\n                                \n                            </div>\n                            <div id='modal-footer'>\n                                <Button onClick={() => setModalStatus(false)}>OK</Button>\n                            </div>\n                        </div>\n\n                    </div> \n                : null\n            }\n            <div id='header'>\n\n                <h1>ATLANTA REGION EVICTION TRACKER</h1>\n                <div id='county-dropdown-container'>\n\n                { smallScreen ?\n\n                    <select value={countyFilter} \n                        onChange={e => setCountyFilter(e.target.value)}\n                    >\n                        {countyOptions ? countyOptions.map(county => \n                            <option \n                            key={county.text} value={county.value} id={`option-${county.text}`}>\n                                {county.text}</option>    \n                        ) : null}\n                    </select> :\n\n                    <Dropdown\n                        // className=\"icon chart-dropdown\"\n                        placeholder=\"Filter by County\"\n                        fluid\n                        // multiple\n                        selection\n                        value={countyFilter}\n                        options={countyOptions}\n                        onChange={(e, data) => setCountyFilter(data.value)}\n                    /> \n                }               \n                </div>\n\n                <div id='viz-toggle'>\n                    {/* <Button.Group className=\"button-group\">\n                        <Button \n                            active={vizView === 'map' ? true : false}\n                            onClick={() => setVizView('map')}\n                        ><h3>\n                            Map\n                        </h3></Button>\n                        <Button \n                            active={vizView === 'chart' ? true : false}\n                            onClick={() => setVizView('chart')}\n\n                        >Chart</Button>\n                    </Button.Group> */}\n                    <div\n                        className='viz-tab' \n                        id={vizView === 'map' ? 'active-viz-tab' : null}\n                        onClick={() => setVizView('map')}\n                    >\n                        <h3>MAP</h3>\n                    </div> \n                    <div \n                        className='viz-tab' \n                        id={vizView === 'chart' ? 'active-viz-tab' : null}\n                        onClick={() => setVizView('chart')}\n\n                    >\n                        <h3>CHART</h3>\n                        \n                    </div>                  \n\n                    {/* MAP \n                    <Radio\n                        style={{\n                            margin: '0 5px 0 5px'\n                        }} \n                        toggle \n                        checked={vizView !== 'map'} \n                        onChange={() => setVizView(vizView === 'map' ? 'chart' : 'map')} /> \n                    CHART */}\n                </div>\n                \n            </div>\n            <div id='viz-box'>\n                {\n                    vizView === 'map' && data ?\n                        <EvictionMap\n                            smallScreen={smallScreen}\n                            data={data}\n                            normalizeData={normalizeData}\n                            dateRange={dateRange}\n                            name={'evictionMap'}\n                            geojson={geoJSON}\n                            boundaryGeoJSON={boundaryGeoJSON}\n                            countyFilter={countyFilter}\n                            counties={countyOptions.map(county => county.key)}\n                            countyInfo={countyOptions}                          \n                        /> \n                    : vizView === 'chart' && data ?\n                    <EvictionChart\n                        smallScreen={smallScreen}\n                        dateRange={dateRange}\n                        data2019={data2019} \n                        countyFilter={countyFilter}\n                        data={data}\n                        counties={countyOptions}/> : null\n                }\n            </div>\n            <div id='footer'>\n                <div id='footer-text'>Developed by</div>\n                <div id='footer-logos'>\n                    <div id='left-logo'>\n                    <img src={Fedlogo} alt='Fed-logo'/>\n                    </div>\n                    <div id='center-logo'>\n                    <img src={ARClogo} alt='ARC-logo'/>\n                    </div>\n                    <div id='right-logo'>\n                    {/* <img src={CSPAVlogo} alt='CSPAV-logo'/> */}\n                        <p>in partnership with Georgia Tech's</p>\n                        <p className='partner-names'>\n                            School of City and Regional Planning (SCaRP) and \n                        </p>\n                        <p className='partner-names'>\n                            Center for Spatial Analysis and Visualization (CSPAV) \n                        </p>\n                    </div>\n                </div>\n                <p>Current as of {dateRange ? moment(dateRange.end).format('M/D/YYYY'): null}\n                </p>\n                \n            </div>\n            <div \n                id='info-icon'\n                onClick={() => setModalStatus(true)}\n            >\n                    <Icon name='question circle' size='big'/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './fonts/Noto_Sans_KR/NotoSansKR-Light.otf';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}